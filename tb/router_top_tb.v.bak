/*////////////// ROUTER TOP MODULE TESTBENCH ///////////////

module router_top_tb();

reg clk, resetn, read_enb_0, read_enb_1, read_enb_2, pkt_valid;
reg [7:0]data_in;

wire [7:0] data_out_0, data_out_1, data_out_2;
wire vld_out_0, vld_out_1, vld_out_2;
wire error, busy;

//for packet generation:

   reg [7:0]payload_data,parity,header;
   reg [5:0]payload_len;
   reg [1:0]addr;

integer i;

router_top  DUT(.clk(clk),
				 .resetn(resetn),
				 .read_enb_0(read_enb_0),
				 .read_enb_1(read_enb_1),
				 .read_enb_2(read_enb_2),
				 .data_in(data_in),
				 .pkt_valid(pkt_valid),
				 .data_out_0(data_out_0),
				 .data_out_1(data_out_1),
				 .data_out_2(data_out_2),
				 .vld_out_0(vld_out_0),
				 .vld_out_1(vld_out_1),
				 .vld_out_2(vld_out_2),
				 .error(error),
				 .busy(busy));
				   
task reset;
begin 
	@(negedge clk)
	resetn = 1'b0;
	@(negedge clk)
	resetn = 1'b1;
end
endtask

task initialize;
begin
	read_enb_0 = 1'b0;
	read_enb_1 = 1'b0;
	read_enb_2 = 1'b0; 
	pkt_valid = 1'b0;
end
endtask

task pkt_gen_14;
 begin
   @(negedge clk); 
   wait(~busy)

   @(negedge clk);
   payload_len = 6'd14;
    addr = 2'b01;  //Valid packet 
    header = {payload_len,addr};
    parity = 0;    
   data_in = header;
     pkt_valid = 1'b1;
   parity = parity ^ header;
   @(negedge clk);
   wait(~busy)
   for(i = 0;i < payload_len ; i = i+1)
	  begin 
        @(negedge clk);
        wait(~busy)
        payload_data = {$random}%256;
        data_in = payload_data;
        parity  = parity ^ payload_data;
      end
         @(negedge clk);
         wait(~busy)
         pkt_valid = 0;
         data_in = parity;
end
endtask
   
task pkt_gen_16;
begin
   @(negedge clk); 
   wait(~busy)

   @(negedge clk);
   payload_len = 6'd16;
   addr = 2'b01;  //Valid packet 
   header = {payload_len,addr};
   parity = 0;    
   data_in = header;
   pkt_valid = 1'b1;
   parity = parity ^ header;
   @(negedge clk);
   wait(~busy)
   for(i = 0;i < payload_len ; i = i+1)
    begin 
        @(negedge clk);
        wait(~busy)
        payload_data = {$random}%256;
        data_in = payload_data;
        parity  = parity ^ payload_data;
    end
	
        @(negedge clk);
        wait(~busy)
        pkt_valid = 0;
        data_in = parity;
      end
endtask
  
task read_enable(input a,b,c);
begin
	read_enb_0 = a;
	read_enb_1 = b;
	read_enb_2 = c; 
end
endtask

initial 
begin
clk = 1'b0;
forever
#5 clk = ~clk;
end

initial 
begin
	initialize;
	reset;
	pkt_gen_14;
	@(negedge clk);
	read_enable(0,1,0);
	wait(~vld_out_1)
	read_enable(0,0,0);
	repeat(5)
	@(negedge clk);
	pkt_gen_16;
	@(negedge clk);
	read_enable(0,1,0);
	wait(~vld_out_1)
	read_enable(0,0,0);
end

initial
#2000 $finish;

initial 
begin
$monitor("data_in = %d, data_out_0 = %d, data_out_1 = %d, data_out_2 = %d, read_enb_0 = %b, read_enb_1 = %b, read_enb_2 = %b", data_in, data_out_0, data_out_1, data_out_2, read_enb_0, read_enb_1, read_enb_2);
end

endmodule */



module router_top_tb();

reg clk, resetn, read_enb_0, read_enb_1, read_enb_2, packet_valid;
reg [7:0]datain;
wire [7:0]data_out_0, data_out_1, data_out_2;
wire vld_out_0, vld_out_1, vld_out_2, err, busy;
integer i;

router_top DUT(.clk(clk),
			   .resetn(resetn),
			   .read_enb_0(read_enb_0),
			   .read_enb_1(read_enb_1),
			   .read_enb_2(read_enb_2),
			   .packet_valid(packet_valid),
			   .datain(datain),
			   .data_out_0(data_out_0),
			   .data_out_1(data_out_1),
			   .data_out_2(data_out_2),
			   .vldout_0(vld_out_0),
			   .vldout_1(vld_out_1),
			   .vldout_2(vld_out_2),
			   .err(err),
			   .busy(busy) );			   
			   
//clock generation

initial 
	begin
	clk = 1;
	forever 
	#5 clk=~clk;
	end
	
	
	task reset;
		begin
			resetn=1'b0;
			{read_enb_0, read_enb_1, read_enb_2, packet_valid, datain}=0;
			#10;
			resetn=1'b1;
		end
	endtask
	
	task pktm_gen_14;	// packet generation payload 8
			reg [7:0]header, payload_data, parity;
			reg [8:0]payloadlen;
			
			begin
				parity=0;
				wait(!busy)
				begin
				@(negedge clk);
				payloadlen=14;
				packet_valid=1'b1;
				header={payloadlen,2'b10};
				datain=header;
				parity=parity^datain;
				end
				@(negedge clk);
							
				for(i=0;i<payloadlen;i=i+1)
					begin
					wait(!busy)				
					@(negedge clk);
					payload_data={$random}%256;
					datain=payload_data;
					parity=parity^datain;				
					end					
								
				wait(!busy)				
					@(negedge clk);
					packet_valid=0;				
					datain=parity;
					repeat(30)
			@(negedge clk);
			read_enb_1=1'b1;
			end
endtask
	
	task pktm_gen_16;	// packet generation payload 8
			reg [7:0]header, payload_data, parity;
			reg [4:0]payloadlen;
			
			begin
				parity=0;
				wait(!busy)
				begin
				@(negedge clk);
				payloadlen=16;
				packet_valid=1'b1;
				header={payloadlen,2'b10};
				datain=header;
				parity=parity^datain;
				end
				@(negedge clk);
							
				for(i=0;i<payloadlen;i=i+1)
					begin
					wait(!busy)				
					@(negedge clk);
					payload_data={$random}%256;
					datain=payload_data;
					parity=parity^datain;				
					end					
								
				wait(!busy)				
					@(negedge clk);
					packet_valid=0;				
					datain=parity;
					repeat(30)
			@(negedge clk);
			read_enb_2=1'b1;
			end
endtask
	
	initial
		begin
			reset;
			#10;
			pktm_gen_8;
			pktm_gen_5;
			#1000;
			$finish;
		end
		
		
endmodule
